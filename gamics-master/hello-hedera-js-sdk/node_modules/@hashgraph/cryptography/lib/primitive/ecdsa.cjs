"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fromBytes = fromBytes;
exports.generate = generate;
exports.generateAsync = generateAsync;
exports.getFullPublicKey = getFullPublicKey;
exports.sign = sign;
exports.verify = verify;
var _keccak = require("./keccak.cjs");
var hex = _interopRequireWildcard(require("../encoding/hex.cjs"));
var _elliptic = _interopRequireDefault(require("elliptic"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
const secp256k1 = new _elliptic.default.ec("secp256k1");

/**
 * @typedef {import("../EcdsaPrivateKey.js").KeyPair} KeyPair
 */

/**
 * @returns {KeyPair}
 */
function generate() {
  const keypair = secp256k1.genKeyPair();
  return {
    privateKey: hex.decode(keypair.getPrivate("hex")),
    publicKey: hex.decode(keypair.getPublic(true, "hex"))
  };
}

/**
 * @returns {Promise<KeyPair>}
 */
// eslint-disable-next-line @typescript-eslint/no-unused-vars
async function generateAsync() {
  return Promise.resolve(generate());
}

/**
 * @param {Uint8Array} data
 * @returns {KeyPair}
 */
// eslint-disable-next-line @typescript-eslint/no-unused-vars
function fromBytes(data) {
  const keypair = secp256k1.keyFromPrivate(data);
  return {
    privateKey: hex.decode(keypair.getPrivate("hex")),
    publicKey: hex.decode(keypair.getPublic(true, "hex"))
  };
}

/**
 * @param {Uint8Array} data
 * @returns {Uint8Array}
 */
// eslint-disable-next-line @typescript-eslint/no-unused-vars
function getFullPublicKey(data) {
  const keypair = secp256k1.keyFromPublic(data);
  return hex.decode(keypair.getPublic(false, "hex"));
}

/**
 * @param {Uint8Array} keydata
 * @param {Uint8Array} message
 * @returns {Uint8Array}
 */
// eslint-disable-next-line @typescript-eslint/no-unused-vars
function sign(keydata, message) {
  const msg = hex.encode(message);
  const data = hex.decode((0, _keccak.keccak256)(`0x${msg}`));
  const keypair = secp256k1.keyFromPrivate(keydata);
  const signature = keypair.sign(data);
  const r = signature.r.toArray("be", 32);
  const s = signature.s.toArray("be", 32);
  const result = new Uint8Array(64);
  result.set(r, 0);
  result.set(s, 32);
  return result;
}

/**
 * @param {Uint8Array} keydata
 * @param {Uint8Array} message
 * @param {Uint8Array} signature
 * @returns {boolean}
 */
// eslint-disable-next-line @typescript-eslint/no-unused-vars
function verify(keydata, message, signature) {
  const msg = hex.encode(message);
  const data = hex.decode((0, _keccak.keccak256)(`0x${msg}`));
  const keypair = secp256k1.keyFromPublic(keydata);
  return keypair.verify(data, {
    r: signature.subarray(0, 32),
    s: signature.subarray(32, 64)
  });
}