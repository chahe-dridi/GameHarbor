"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.derive = derive;
exports.fromSeed = fromSeed;
var hmac = _interopRequireWildcard(require("../primitive/hmac.cjs"));
var bip32 = _interopRequireWildcard(require("../primitive/bip32.cjs"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/**
 * @param {Uint8Array} parentKey
 * @param {Uint8Array} chainCode
 * @param {number} index
 * @returns {Promise<{ keyData: Uint8Array; chainCode: Uint8Array }>}
 */
async function derive(parentKey, chainCode, index) {
  if (bip32.isHardenedIndex(index)) {
    throw new Error("the index should not be pre-hardened");
  }
  const input = new Uint8Array(37);

  // 0x00 + parentKey + index(BE)
  input[0] = 0;
  input.set(parentKey, 1);
  new DataView(input.buffer, input.byteOffset, input.byteLength).setUint32(33, index, false);

  // set the index to hardened
  input[33] |= 128;
  const digest = await hmac.hash(hmac.HashAlgorithm.Sha512, chainCode, input);
  return {
    keyData: digest.subarray(0, 32),
    chainCode: digest.subarray(32)
  };
}

/**
 * @param {Uint8Array} seed
 * @returns {Promise<{ keyData: Uint8Array; chainCode: Uint8Array }>}
 */
async function fromSeed(seed) {
  const digest = await hmac.hash(hmac.HashAlgorithm.Sha512, "ed25519 seed", seed);
  return {
    keyData: digest.subarray(0, 32),
    chainCode: digest.subarray(32)
  };
}