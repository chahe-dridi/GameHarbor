"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.HashAlgorithm = void 0;
exports.hash = hash;
var _cryptoJs = _interopRequireDefault(require("crypto-js"));
var utf8 = _interopRequireWildcard(require("../encoding/utf8.cjs"));
var hex = _interopRequireWildcard(require("../encoding/hex.cjs"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/**
 * @enum {string}
 */
const HashAlgorithm = {
  Sha256: "SHA-256",
  Sha384: "SHA-384",
  Sha512: "SHA-512"
};

/**
 * @param {HashAlgorithm} algorithm
 * @param {Uint8Array | string} secretKey
 * @param {Uint8Array | string} data
 * @returns {Promise<Uint8Array>}
 */
exports.HashAlgorithm = HashAlgorithm;
function hash(algorithm, secretKey, data) {
  const key = typeof secretKey === "string" ? utf8.encode(secretKey) : secretKey;
  const value = typeof data === "string" ? utf8.encode(data) : data;
  const key_ = _cryptoJs.default.enc.Hex.parse(hex.encode(key));
  const value_ = _cryptoJs.default.enc.Hex.parse(hex.encode(value));
  switch (algorithm) {
    case HashAlgorithm.Sha256:
      return Promise.resolve(hex.decode(_cryptoJs.default.HmacSHA256(value_, key_).toString(_cryptoJs.default.enc.Hex)));
    case HashAlgorithm.Sha384:
      return Promise.resolve(hex.decode(_cryptoJs.default.HmacSHA384(value_, key_).toString(_cryptoJs.default.enc.Hex)));
    case HashAlgorithm.Sha512:
      return Promise.resolve(hex.decode(_cryptoJs.default.HmacSHA512(value_, key_).toString(_cryptoJs.default.enc.Hex)));
    default:
      throw new Error("(BUG) Non-Exhaustive switch statement for algorithms");
  }
}