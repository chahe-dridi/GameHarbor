"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CipherAlgorithm = void 0;
exports.createCipheriv = createCipheriv;
exports.createDecipheriv = createDecipheriv;
exports.messageDigest = messageDigest;
var _crypto = _interopRequireDefault(require("crypto"));
var hex = _interopRequireWildcard(require("../encoding/hex.cjs"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const CipherAlgorithm = {
  Aes128Ctr: "AES-128-CTR",
  Aes128Cbc: "AES-128-CBC"
};

/**
 * @param {string} algorithm
 * @param {Uint8Array} key
 * @param {Uint8Array} iv
 * @param {Uint8Array} data
 * @returns {Promise<Uint8Array>}
 */
exports.CipherAlgorithm = CipherAlgorithm;
function createCipheriv(algorithm, key, iv, data) {
  const cipher = _crypto.default.createCipheriv(algorithm, key.slice(0, 16), iv);
  return Promise.resolve(Buffer.concat([cipher.update(data), cipher["final"]()]));
}

/**
 * @param {string} algorithm
 * @param {Uint8Array} key
 * @param {Uint8Array} iv
 * @param {Uint8Array} data
 * @returns {Promise<Uint8Array>}
 */
function createDecipheriv(algorithm, key, iv, data) {
  const decipher = _crypto.default.createDecipheriv(algorithm, key.slice(0, 16), iv);
  return Promise.resolve(Buffer.concat([decipher.update(data), decipher["final"]()]));
}

/**
 * @param {string} passphrase
 * @param {string} iv
 * @returns {Promise<Uint8Array>}
 */
function messageDigest(passphrase, iv) {
  return Promise.resolve(_crypto.default.createHash("md5").update(passphrase).update(hex.decode(iv).slice(0, 8)).digest());
}