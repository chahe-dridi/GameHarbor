"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.HashAlgorithm = void 0;
exports.hash = hash;
var utf8 = _interopRequireWildcard(require("../encoding/utf8.cjs"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/**
 * @enum {string}
 */
const HashAlgorithm = {
  Sha256: "SHA-256",
  Sha384: "SHA-384",
  Sha512: "SHA-512"
};

/**
 * @param {HashAlgorithm} algorithm
 * @param {Uint8Array | string} secretKey
 * @param {Uint8Array | string} data
 * @returns {Promise<Uint8Array>}
 */
exports.HashAlgorithm = HashAlgorithm;
async function hash(algorithm, secretKey, data) {
  const key = typeof secretKey === "string" ? utf8.encode(secretKey) : secretKey;
  const value = typeof data === "string" ? utf8.encode(data) : data;
  try {
    const key_ = await window.crypto.subtle.importKey("raw", key, {
      name: "HMAC",
      hash: algorithm
    }, false, ["sign"]);
    return new Uint8Array(await window.crypto.subtle.sign("HMAC", key_, value));
  } catch {
    throw new Error("Fallback if SubtleCrypto fails is not implemented");
  }
}